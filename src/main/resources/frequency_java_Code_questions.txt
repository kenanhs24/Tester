1|Write a program to check if a number is an Armstrong number.|public class Armstrong { public static boolean isArmstrong(int number) { int original = number, sum = 0; int digits = String.valueOf(number).length(); while (number > 0) { int digit = number % 10; sum += Math.pow(digit, digits); number /= 10; } return sum == original; } public static void main(String[] args) { System.out.println(isArmstrong(153)); // true System.out.println(isArmstrong(9474)); // true System.out.println(isArmstrong(123)); // false } }
2|Write a program to find the binary representation of a number.|public class BinaryRepresentation { public static String toBinary(int number) { return Integer.toBinaryString(number); } public static void main(String[] args) { System.out.println(toBinary(10)); // 1010 System.out.println(toBinary(255)); // 11111111 } }
3|Write a program to find all consecutive numbers adding up to a given sum.|public class ConsecutiveSum { public static void findConsecutiveSums(int target) { for (int start = 1; start < target; start++) { int sum = 0; for (int num = start; sum < target; num++) { sum += num; if (sum == target) { for (int i = start; i <= num; i++) { System.out.print(i + " "); } System.out.println(); } } } } public static void main(String[] args) { findConsecutiveSums(15); } }
4|Write a program to perform division without using the division operator.|public class Division { public static int divide(int dividend, int divisor) { int quotient = 0; int sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1; dividend = Math.abs(dividend); divisor = Math.abs(divisor); while (dividend >= divisor) { dividend -= divisor; quotient++; } return quotient * sign; } public static void main(String[] args) { System.out.println(divide(10, 2)); // 5 System.out.println(divide(7, -3)); // -2 } }
...
